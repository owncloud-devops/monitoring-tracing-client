---
version: "3.7"

services:
  telegraf:
    image: telegraf:1.20.3
    user: 0:0
    command: |
      --config /etc/telegraf/telegraf.conf
      --config-directory /etc/telegraf/telegraf.d/
    volumes:
      # host and docker metrics and Prometheus output settings 
      - ./config/telegraf.conf:/etc/telegraf/telegraf.conf
      - ./config/telegraf:/etc/telegraf/telegraf.d
      # specific Prometheus input settings - this config depends on the deployment example
      - ./config/telegraf_specific_config/${TELEGRAF_SPECIFIC_CONFIG:-none}.conf:/etc/telegraf/telegraf.d/ocis.conf
      # mounts to gather metrics from the host and docker inside the container
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/hostfs:ro
    networks:
      - monitoring-tracing
    environment:
      HOSTNAME: ${TELEMETRY_SERVE_DOMAIN:-telemetry.infra.owncloud.test}
      OCIS_URL: ${OCIS_URL:-ocis.owncloud.test}
      OCIS_DEPLOYMENT_ID: ${OCIS_DEPLOYMENT_ID:-generic_ocis}
      HOST_ETC: /hostfs/etc
      HOST_PROC: /hostfs/proc
      HOST_SYS: /hostfs/sys
      HOST_VAR: /hostfs/var
      HOST_RUN: /hostfs/run
      HOST_MOUNT_PREFIX: /hostfs
    labels:
      # make the Prometheus output publicly available so that Prometheus server can scrape this endpoint
      - "traefik.enable=true"
      - "traefik.http.routers.telegraf.entrypoints=https"
      - "traefik.http.routers.telegraf.rule=Host(`${TELEMETRY_SERVE_DOMAIN:-telemetry.owncloud.test}`)"
      - "traefik.http.routers.telegraf.tls.certresolver=http"
      - "traefik.http.routers.telegraf.service=telegraf"
      - "traefik.http.services.telegraf.loadbalancer.server.port=9273"
    logging: &logging
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "2"
    restart: always

  jaeger-agent:
    image: jaegertracing/jaeger-agent:1.28.0
    command: |
      --reporter.type=grpc
      --reporter.grpc.host-port=${JAEGER_COLLECTOR:-jaeger-collector.owncloud.test:443}
      --reporter.grpc.tls.skip-host-verify=${INSECURE:-false}
      --reporter.grpc.tls.enabled=true
      --log-level=error
      --agent.tags=OCIS_URL=${OCIS_URL:-ocis.owncloud.test},OCIS_DEPLOYMENT_ID=${OCIS_DEPLOYMENT_ID:-generic_ocis}
    networks:
      - monitoring-tracing
    logging:
      <<: *logging
    restart: always

networks:
  # needs to be external in order to be shared between two docker-compose stacks
  monitoring-tracing:
    name: ${NETWORK_NAME:-ocis-net}
    external: true
